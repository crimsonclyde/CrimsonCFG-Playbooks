# CrimsonCFG-Name: Custom ZSH Setup
# CrimsonCFG-Description: Setup ZSH, Oh My Zsh, Powerlevel10k, plugins, and GNOME Terminal profile
# CrimsonCFG-Essential: false
# CrimsonCFG-RequiredVars: false
---
- name: Costum ZSH Setup
  hosts: all
  become: true
  vars_files:
    - "{{ lookup('env', 'HOME') + '/.config/com.crimson.cfg/local.yml' }}"
  vars:
    # Fonts
    - hack_nerd_font_url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/Hack.zip"
    - meslo_nerd_font_url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf"
    # ZSH
    ## ZSH Plugins
    - zsh_plugins:
        - name: zsh-autosuggestions
          repo: https://github.com/zsh-users/zsh-autosuggestions.git
        - name: zsh-syntax-highlighting
          repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        - name: zsh-completions
          repo: https://github.com/zsh-users/zsh-completions.git
    ## Oh-my-ZSH
    - oh_my_zsh_install_url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
    ## Powerlevel10K
    - powerlevel10k_repo: https://github.com/romkatv/powerlevel10k.git

  tasks:
    - name: Install ZSH and fonts dependencies
      ansible.builtin.apt:
        name:
          - zsh
          - fonts-powerline
          - wget
          - git
          - unzip
          - dconf-cli
        state: present

    - name: Change default shell to zsh
      ansible.builtin.user:
        name: "{{ user }}"
        shell: /usr/bin/zsh

    - name: Install Oh My Zsh
      become: false
      ansible.builtin.shell: |
        sh -c "$(wget -O- {{ oh_my_zsh_install_url }})" "" --unattended
      args:
        creates: ~/.oh-my-zsh

    - name: Install Powerlevel10k theme
      become: false
      ansible.builtin.git:
        repo: "{{ powerlevel10k_repo }}"
        dest: "{{ user_home }}/.oh-my-zsh/custom/themes/powerlevel10k"
        version: master

    - name: Pre-download gitstatusd to suppress download message
      become: false
      ansible.builtin.shell: |
        cd {{ user_home }}/.oh-my-zsh/custom/themes/powerlevel10k
        ./gitstatus/install
      args:
        executable: /bin/bash
      changed_when: false

    #######################
    # Install MesloLGS NF Regular Font
    #######################

    - name: Check if MesloLGS NF Regular font is installed
      ansible.builtin.stat:
        path: "{{ user_home }}/.fonts/MesloLGS NF Regular.ttf"
      register: meslo_font

    - name: Ensure fonts directory exists
      ansible.builtin.file:
        path: "{{ user_home }}/.fonts"
        state: directory
        mode: '0755'
        owner: "{{ user | basename }}"
        group: "{{ user | basename }}"

    - name: Download MesloLGS NF Regular.ttf to fonts directory
      ansible.builtin.get_url:
        url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf"
        dest: "{{ user_home }}/.fonts/MesloLGS NF Regular.ttf"
        mode: '0644'
        owner: "{{ user | basename }}"
        group: "{{ user | basename }}"
      when: not meslo_font.stat.exists

    - name: Update font cache
      ansible.builtin.command:
        cmd: fc-cache -fv
      changed_when: false
      when: not meslo_font.stat.exists

    #######################
    # Install Oh My Zsh plugins
    #######################

    - name: Install Oh My Zsh plugins
      become: false
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ user_home }}/.oh-my-zsh/custom/plugins/{{ item.name }}"
        version: master
      loop: "{{ zsh_plugins }}"

    - name: Set ZSH_THEME to powerlevel10k/powerlevel10k
      become: false
      ansible.builtin.replace:
        path: "{{ user_home }}/.zshrc"
        regexp: '^ZSH_THEME=".*"$'
        replace: 'ZSH_THEME="powerlevel10k/powerlevel10k"'

    - name: Debug templates directory
      ansible.builtin.debug:
        msg: "templates_directory is: {{ templates_directory }}"

    - name: Copy p10k.zsh template to user's home directory
      ansible.builtin.template:
        src: "{{ templates_directory }}/p10k.zsh.j2"
        dest: "{{ user_home }}/.p10k.zsh"
        mode: '0644'
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Ensure plugins are added to .zshrc
      become: false
      ansible.builtin.lineinfile:
        path: "{{ user_home }}/.zshrc"
        regexp: '^plugins='
        line: 'plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions)'

    - name: Ensure Powerlevel10k configuration is sourced in .zshrc
      ansible.builtin.lineinfile:
        path: "{{ user_home }}/.zshrc"
        line: "source {{ user_home }}/.p10k.zsh"
        insertafter: EOF
        state: present
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'

    - name: Add gitstatusd environment variable to suppress download message
      ansible.builtin.lineinfile:
        path: "{{ user_home }}/.zshrc"
        line: "export GITSTATUS_DAEMON_LOG=ERROR"
        insertafter: EOF
        state: present
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'

    #######################
    # Install Fastfetch
    #######################

    - name: Get latest Fastfetch release metadata
      ansible.builtin.uri:
        url: "https://api.github.com/repos/fastfetch-cli/fastfetch/releases/latest"
        return_content: true
      register: fastfetch_release

    - name: Find .deb asset
      ansible.builtin.set_fact:
        fastfetch_deb_url: >-
          {{
            fastfetch_release.json.assets
            | selectattr('name', 'match', '.*linux-amd64.deb$')
            | map(attribute='browser_download_url')
            | first
          }}
        fastfetch_latest_version: >-
          {{ fastfetch_release.json.tag_name | regex_search('([0-9]+\.[0-9]+\.[0-9]+)', '\1') | default('0.0.0') }}

    - name: Get installed Fastfetch version
      ansible.builtin.command: fastfetch --version
      register: fastfetch_installed_version
      failed_when: false
      changed_when: false

    - name: Set installed Fastfetch version fact
      ansible.builtin.set_fact:
        fastfetch_installed_version_str: "{{ fastfetch_installed_version.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | default('0.0.0') }}"

    - name: Debug Fastfetch versions
      ansible.builtin.debug:
        msg: "Installed: {{ fastfetch_installed_version_str }}, Latest: {{ fastfetch_latest_version }}"

    - name: Download latest Fastfetch .deb
      ansible.builtin.get_url:
        url: "{{ fastfetch_deb_url }}"
        dest: "/tmp/fastfetch-latest.deb"
        mode: '0755'
        owner: "root"
        group: "root"
      when: fastfetch_installed_version_str != fastfetch_latest_version

    - name: Install Fastfetch .deb
      ansible.builtin.apt:
        deb: "/tmp/fastfetch-latest.deb"
      when: fastfetch_installed_version_str != fastfetch_latest_version

    - name: Remove downloaded .deb
      ansible.builtin.file:
        path: "/tmp/fastfetch-latest.deb"
        state: absent
      when: fastfetch_installed_version_str != fastfetch_latest_version

    - name: Verify Fastfetch installation
      ansible.builtin.command: fastfetch --version
      register: fastfetch_version
      changed_when: false

    - name: Display Fastfetch version
      ansible.builtin.debug:
        var: fastfetch_version.stdout

    #######################
    # Install Hack Nerd Font (if not already installed)
    #######################

    - name: Check if Hack Nerd Font is installed
      ansible.builtin.stat:
        path: "{{ user_home }}/.fonts/Hack Regular Nerd Font Complete.ttf"
      register: hack_font

    - name: Download Hack Nerd Font zip to /tmp
      ansible.builtin.get_url:
        url: "{{ hack_nerd_font_url }}"
        dest: "/tmp/Hack.zip"
        mode: '0644'
        owner: "root"
        group: "root"
      when: not hack_font.stat.exists

    - name: Ensure fonts directory exists
      ansible.builtin.file:
        path: "{{ user_home }}/.fonts"
        state: directory
        mode: '0755'
        owner: "{{ user | basename }}"
        group: "{{ user | basename }}"

    - name: Unzip Hack Nerd Font to fonts directory
      ansible.builtin.unarchive:
        src: "/tmp/Hack.zip"
        dest: "{{ user_home }}/.fonts"
        remote_src: true
      when: not hack_font.stat.exists

    - name: Update font cache
      ansible.builtin.command:
        cmd: fc-cache -fv
      changed_when: false
      when: not hack_font.stat.exists

    - name: Remove downloaded zip file
      ansible.builtin.file:
        path: "/tmp/Hack.zip"
        state: absent
      when: not hack_font.stat.exists

    #######################
    # Install custom fastfetch config
    #######################

    - name: Check if fastfetch config exists
      ansible.builtin.stat:
        path: "/etc/fastfetch/fastfetch_config.jsonc"
      register: fastfetch_config

    - name: Ensure /etc/fastfetch directory exists
      ansible.builtin.file:
        path: /etc/fastfetch
        state: directory
        mode: '0755'

    - name: Copy fastfetch config template with IP inserted
      ansible.builtin.template:
        src: "{{ templates_directory }}/fastfetch_conf.jsonc.j2"
        dest: /etc/fastfetch/fastfetch_config.jsonc
        mode: '0644'

    #######################
    # Add fastfetch to .zshrc
    #######################

    - name: Check if fastfetch is in .zshrc
      ansible.builtin.shell: grep -q "^fastfetch$" "{{ user_home }}/.zshrc"
      register: fastfetch_in_zshrc
      failed_when: false
      changed_when: false

    - name: Add fastfetch to .zshrc
      ansible.builtin.lineinfile:
        path: "{{ user_home }}/.zshrc"
        line: "fastfetch -c /etc/fastfetch/fastfetch_config.jsonc"
        state: present
      when: fastfetch_in_zshrc.rc != 0

    - name: GNOME Terminal - Create or update '{{ user }}' profile
      become: false
      vars:
        # Get user's session information
        user_session_id: "{{ ansible_user_id }}"
        xdg_runtime_dir: "/run/user/{{ lookup('pipe', 'id -u ' + user) }}"
      block:

        - name: Get current GNOME Terminal profiles list
          ansible.builtin.command: gsettings get org.gnome.Terminal.ProfilesList list
          register: profiles_list
          changed_when: false
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"

        - name: Convert profiles list to usable array
          ansible.builtin.set_fact:
            profiles_array: "{{ profiles_list.stdout | regex_findall(\"'([a-f0-9\\-]+)'\") }}"

        - name: Find UUID with visible-name '{{ user }}'
          ansible.builtin.shell: |
            set -o pipefail
            for uuid in {{ profiles_array | join(' ') }}; do
              name=$(gsettings get org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$uuid/ visible-name 2>/dev/null | tr -d "'")
              if [ "$name" = "{{ user }}" ]; then echo $uuid; break; fi
            done
          register: profile_existing_uuid
          changed_when: false
          args:
            executable: /bin/bash

        - name: Use existing {{ user }} UUID if found
          ansible.builtin.set_fact:
            profile_uuid: "{{ profile_existing_uuid.stdout | default('') }}"

        - name: Generate new UUID for {{ user }} if needed
          ansible.builtin.command: uuidgen
          register: new_profile_uuid
          when: profile_uuid == ""
          changed_when: false

        - name: Set new {{ user }} UUID if generated
          ansible.builtin.set_fact:
            profile_uuid: "{{ new_profile_uuid.stdout }}"
          when: profile_uuid == ""

        - name: Get default profile UUID
          ansible.builtin.command: gsettings get org.gnome.Terminal.ProfilesList default
          register: default_profile_uuid_raw
          changed_when: false
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"

        - name: Strip quotes from default UUID
          ansible.builtin.set_fact:
            default_profile_uuid: "{{ default_profile_uuid_raw.stdout | trim | trim(\"'\") }}"
          changed_when: false

        - name: Add {{ user }} UUID to profiles list if missing
          ansible.builtin.shell: |
            set -o pipefail
            profiles=$(gsettings get org.gnome.Terminal.ProfilesList list)
            if ! echo "$profiles" | grep -q "'{{ profile_uuid }}'"; then
              updated=$(echo "$profiles" | sed "s/]$/, '{{ profile_uuid }}']/")
              gsettings set org.gnome.Terminal.ProfilesList list "$updated"
            fi
          args:
            executable: /bin/bash
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"
          changed_when: true

        - name: Set visible-name to '{{ user }}' if profile is new
          ansible.builtin.shell: |
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" visible-name '{{ user }}'
          args:
            executable: /bin/bash
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"
          when: profile_existing_uuid.stdout == ""
          changed_when: true

        - name: Clone default profile keys (except visible-name) to {{ user }}
          ansible.builtin.shell: |
            keys=$(gsettings list-keys org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ default_profile_uuid }}/")
            for key in $keys; do
              if [ "$key" != "visible-name" ]; then
                value=$(gsettings get org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ default_profile_uuid }}/" $key)
                gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" $key "$value"
              fi
            done
          args:
            executable: /bin/bash
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"
          when: profile_existing_uuid.stdout == ""
          changed_when: true

        - name: Ensure visible-name is '{{ user }}'
          ansible.builtin.shell: |
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" visible-name '{{ user }}'
          args:
            executable: /bin/bash
          environment:
            XDG_RUNTIME_DIR: "{{ xdg_runtime_dir }}"
            DBUS_SESSION_BUS_ADDRESS: "unix:path={{ xdg_runtime_dir }}/bus"
          changed_when: true

        - name: Set custom settings for profile
          ansible.builtin.shell: |
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" use-transparent-background true
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" background-transparency-percent 10
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" default-size-columns 123
            gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"{{ profile_uuid }}/" default-size-rows 32
          args:
            executable: /bin/bash
          changed_when: true

        - name: Set profile as default profile
          ansible.builtin.shell: |
            gsettings set org.gnome.Terminal.ProfilesList default "{{ profile_uuid }}"
          args:
            executable: /bin/bash
          changed_when: true



        #######################
        # Debug
        #######################
        - name: Debug current profile UUID and profile list
          ansible.builtin.debug:
            msg:
              - "profile_uuid: {{ profile_uuid }}"
              - "profile_existing_uuid.stdout: {{ profile_existing_uuid.stdout }}"
              - "profiles_array: {{ profiles_array }}"

        - name: List visible-names for debugging
          ansible.builtin.shell: |
            set -o pipefail
            for uuid in $(echo {{ profiles_list.stdout | regex_replace("[\\[\\]',]", "") }}); do
              name=$(gsettings get org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$uuid/ visible-name || echo "(none)")
              echo "$uuid: $name"
            done
          args:
            executable: /bin/bash
          register: profile_names
          changed_when: false

        - name: Show current GNOME Terminal profiles and names
          ansible.builtin.debug:
            msg: "{{ profile_names.stdout_lines }}"

        - name: Debug current profile UUID
          ansible.builtin.debug:
            msg:
              - "profile_uuid: {{ profile_uuid }}"
              - "profile_existing_uuid.stdout: {{ profile_existing_uuid.stdout }}"
              - "profiles_array: {{ profiles_array }}"

    ## ----------------------------------------------------
    ## Pin App to GNOME dock
    ## ----------------------------------------------------
    - name: Ensure python3-psutil is installed for dconf module
      ansible.builtin.apt:
        name: python3-psutil
        state: present

    - name: Get current GNOME dock favorites
      community.general.dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: true
      become_user: "{{ user }}"
      environment:
        HOME: "{{ user_home }}"
      register: current_favorites

    - name: Normalize GNOME favorites value to a list
      ansible.builtin.set_fact:
        gnome_favorites_list: >-
          {{
            (current_favorites.value
              | default([])
              | from_yaml
              if (current_favorites.value is string)
              else (current_favorites.value | default([]) | list)
            )
          }}

    - name: Pin app to GNOME dock favorites
      community.general.dconf:
        key: /org/gnome/shell/favorite-apps
        value: >-
          {{
            (gnome_favorites_list +
              ([app_desktop_file] if app_desktop_file not in gnome_favorites_list else [])
            ) | to_json
          }}
        state: present
      become: true
      become_user: "{{ user }}"
      environment:
        HOME: "{{ user_home }}"
      vars:
        app_desktop_file: "org.gnome.Terminal.desktop"
      when: app_desktop_file not in gnome_favorites_list
