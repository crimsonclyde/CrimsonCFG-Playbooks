# CrimsonCFG-Name: Landscape Client
# CrimsonCFG-Description: Install Landscape Client
# CrimsonCFG-Essential: false
# CrimsonCFG-RequiredVars: false
---
- name: Install Landscape Client
  hosts: all
  become: true
  vars_files:
    - "{{ lookup('env', 'HOME') + '/.config/com.crimson.cfg/local.yml' }}"

  vars:
    account_name: "{{ landscape_account_name | default('standalone') }}"
    registration_key: "{{ landscape_registration_key | default('YOUR-REGISTRATION-KEY') }}"
    ping_url: "{{ landscape_ping_url | default('https://landscape.canonical.com/ping') }}"

  tasks:
    # ---------- User Environment Setup ----------
    
    - name: Set user environment variables
      set_fact:
        current_user: "{{ lookup('pipe', 'ls /home | head -n 1') }}"
        user_display: "{{ lookup('pipe', 'sudo -u ' + lookup('pipe', 'ls /home | head -n 1') + ' bash -c \"echo $DISPLAY\"') }}"
        user_id: "{{ lookup('pipe', 'id -u ' + lookup('pipe', 'ls /home | head -n 1')) }}"

    - name: Set default display if empty
      set_fact:
        user_display: ":0"
      when: user_display == ""

    # ---------- Ubuntu Advantage Tools Setup ----------
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install ubuntu-advantage-tools
      apt:
        name: ubuntu-advantage-tools
        state: present



    # Get Ubuntu Pro attach code
    - name: Start Ubuntu Pro device-code attach and capture URL+CODE
      become: true
      shell: |
        set -Eeuo pipefail
        LOG="{{ pro_attach_log | default('/var/tmp/pro_attach.out') }}"
        PIDFILE="${LOG}.pid"

        # If already attached, note and skip starting a new attach
        if pro status --format json 2>/dev/null | grep -q '"attached": *true'; then
          echo "Already attached" | tee "$LOG"
          exit 0
        fi

        # If an attach is already running, keep it; otherwise start one
        if [ -f "$PIDFILE" ] && ps -p "$(cat "$PIDFILE" 2>/dev/null)" >/dev/null 2>&1; then
          echo "pro attach already running (pid $(cat "$PIDFILE"))" | tee -a "$LOG"
        else
          : > "$LOG"
          ( nohup pro attach > "$LOG" 2>&1 & echo $! > "$PIDFILE" )
        fi
      args:
        executable: /bin/bash
      register: pro_attach_start
      changed_when: true

    - name: Wait for device CODE to appear
      become: true
      shell: |
        grep -m1 -oE 'code: [A-Z0-9-]+' {{ pro_attach_log | default('/var/tmp/pro_attach.out') }} | awk '{print $2}'
      register: ua_device_code_raw
      retries: 60           # tries for ~2 minutes total
      delay: 2
      until: (ua_device_code_raw.stdout | default('')) | length > 0
      changed_when: false

    - name: Capture attach URL
      become: true
      shell: |
        grep -m1 -oE 'https?://[^ ]*ubuntu.com/pro/attach[^ ]*' {{ pro_attach_log | default('/var/tmp/pro_attach.out') }} \
          || echo "https://ubuntu.com/pro/attach"
      register: ua_attach_url_raw
      changed_when: false

    - name: Save URL and CODE as facts
      set_fact:
        ua_attach_url: "{{ ua_attach_url_raw.stdout }}"
        ua_device_code: "{{ ua_device_code_raw.stdout }}"

    - name: Show the URL and CODE
      debug:
        msg:
          - "Open: {{ ua_attach_url }}"
          - "Code: {{ ua_device_code }}"


    # ---------- Ubuntu Pro Attach (old)----------

    - name: Get Ubuntu Pro attach code
      shell: |
        # Run pro attach as root and capture output
        sudo timeout 5 pro attach 2>&1 | tee /var/tmp/pro_attach_output.log || true
        
        # Extract the code from the output
        if [ -f /var/tmp/pro_attach_output.log ]; then
          # Try multiple patterns to find the code
          ATTACH_CODE=""
          
          # Pattern 1: "And provide the following code: XXXXXX"
          if [ -z "$ATTACH_CODE" ]; then
            ATTACH_CODE=$(grep -o "And provide the following code: [A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]" /var/tmp/pro_attach_output.log | sed 's/And provide the following code: //' | head -1)
          fi
          
          # Pattern 2: "code: XXXXXX" (shorter pattern)
          if [ -z "$ATTACH_CODE" ]; then
            ATTACH_CODE=$(grep -o "code: [A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]" /var/tmp/pro_attach_output.log | sed 's/code: //' | head -1)
          fi
          
          # Pattern 3: Just look for 6-character alphanumeric codes
          if [ -z "$ATTACH_CODE" ]; then
            ATTACH_CODE=$(grep -o "[A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]" /var/tmp/pro_attach_output.log | head -1)
          fi
          
          if [ ! -z "$ATTACH_CODE" ]; then
            echo "$ATTACH_CODE"
          else
            echo "NO_CODE_FOUND"
          fi
        else
          echo "NO_CODE_FOUND"
        fi
      register: pro_attach_code
      changed_when: false
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Debug Ubuntu Pro attach code
      debug:
        msg: "Captured attach code: {{ pro_attach_code.stdout }}"
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Debug Ubuntu Pro attach output file
      shell: cat /var/tmp/pro_attach_output.log
      register: pro_attach_debug
      changed_when: false
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Show Ubuntu Pro attach output
      debug:
        msg: "Pro attach output: {{ pro_attach_debug.stdout_lines }}"
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Display Ubuntu Pro registration info with browser option
      shell: |
        sudo -u "{{ current_user }}" \
          DISPLAY="{{ user_display }}" \
          XDG_RUNTIME_DIR=/run/user/"{{ user_id }}" \
          zenity --question \
          --title="Ubuntu Pro Registration Required" \
          --text="Ubuntu Pro registration required!\n\nURL: https://ubuntu.com/pro/attach\n\nAttach Code: {{ pro_attach_code.stdout }}\n\nClick 'Yes' to open browser, or 'No' to continue manually." \
          --ok-label="Open Browser" \
          --cancel-label="Continue Manually" \
          --width=500 \
          --height=300
      register: zenity_result
      changed_when: zenity_result.rc == 0
      failed_when: zenity_result.rc != 0 and zenity_result.rc != 1 and zenity_result.rc != 5
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Open Ubuntu Pro registration URL in browser
      shell: |
        sudo -u "{{ current_user }}" \
          DISPLAY="{{ user_display }}" \
          XDG_RUNTIME_DIR=/run/user/"{{ user_id }}" \
          xdg-open "https://ubuntu.com/pro/attach"
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached
        - zenity_result.rc == 0

    - name: Clean up Ubuntu Pro attach log
      file:
        path: /var/tmp/pro_attach_output.log
        state: absent
      when: 
        - ubuntu_pro_token | default('') == ''
        - not is_attached

    - name: Verify Ubuntu Pro attachment
      command: pro status --format json
      register: pro_status_final
      changed_when: false
      when: not is_attached

    - name: Display final Ubuntu Pro status
      debug:
        msg: "Ubuntu Pro Status: {{ pro_status_final.stdout | from_json | default({}) | json_query('attached') | default('Unknown') }}"

    # ---------- Landscape Client Installation ----------

    - name: Install landscape client via apt
      apt:
        name: landscape-client
        state: present
        update_cache: yes

    - name: Register machine with Landscape (apt, idempotent)
      command: >
        landscape-config
        --computer-title "{{ ansible_hostname }}"
        --account-name "{{ account_name }}"
        --registration-key "{{ registration_key }}"
        --ping-url "{{ ping_url }}"
        --silent
      args:
        # Apt stores its config under /etc/landscape/
        creates: /etc/landscape/client.conf

    - name: Ensure Landscape client service is enabled and running
      systemd:
        name: landscape-client
        enabled: yes
        state: started

    # ---------- Debug / verification via systemctl & journalctl ----------

    - name: Show Landscape client service status (systemctl)
      command: systemctl status landscape-client --no-pager
      register: lc_status
      changed_when: false

    - name: Debug service status
      debug:
        var: lc_status.stdout_lines

    - name: Tail last 200 journal lines for Landscape client
      command: journalctl -u landscape-client -n 200 --no-pager
      register: lc_journal
      changed_when: false
      failed_when: false

    - name: Debug journal tail
      debug:
        var: lc_journal.stdout_lines

    - name: Show applied Landscape apt config
      command: cat /etc/landscape/client.conf
      register: lc_conf
      changed_when: false
      failed_when: false

    - name: Debug Landscape config
      debug:
        var: lc_conf.stdout_lines
